package kr.or.ddit.emp.service;

import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Period;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.List;

import javax.inject.Inject;

import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import kr.or.ddit.emp.dao.EmpDAO;
import kr.or.ddit.vo.EmpVO;
import kr.or.ddit.vo.Pagination;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class EmpServiceImpl implements EmpService {
    @Inject
    private EmpDAO dao;

    @Inject
    private PasswordEncoder encoder;

    /**
     * 사원 등록하기 + 입력받은 비밀번호 암호화하기
     * @param vo
     * @return
     */
    @Override
    public int insertEmp(EmpVO vo) {

        String birthday = vo.getTempRegno(); // 프론트에서 입력받은 생년월일
        String frontDigits = getFrontDigits(birthday);  // 주민등록번호 앞자리 (950101)
        String bir = birthday.replaceAll("[^\\w+]", "");    // 생년월일에서 '-' 제거

        vo.setEmpRegno1(Integer.valueOf(frontDigits));
        vo.setEmpAge(getAmericanAge(bir));
        encryptBoard(vo);
        return dao.insertEmp(vo);
    }

    private int getAmericanAge(String birthDate) {    // 생년월일로 나이 구하기
        LocalDate now = LocalDate.now();
        LocalDate parsedBirthDate = LocalDate.parse(birthDate, DateTimeFormatter.ofPattern("yyyyMMdd"));

        int americanAge = now.minusYears(parsedBirthDate.getYear()).getYear(); // (1)

        // (2)
        // 생일이 지났는지 여부를 판단하기 위해 (1)을 입력받은 생년월일의 연도에 더한다.
        // 연도가 같아짐으로 생년월일만 판단할 수 있다!
        if (parsedBirthDate.plusYears(americanAge).isAfter(now)) {
            americanAge = americanAge -1;
        }

        return americanAge;
    }
    private String getFrontDigits(String birthday) {  // 생년월일을 주민등록번호 앞자리로 바꿔주기
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        try {
            Date date = format.parse(birthday);

            int year = date.getYear() % 100; // 연도의 뒤 2자리
            int month = date.getMonth() + 1; // 월
            int day = date.getDate(); // 일

            String monthString = String.format("%02d", month); // 월을 2자리로 포맷팅
            String dayString = String.format("%02d", day); // 일을 2자리로 포맷팅

            return String.format("%02d%02d%02d", year, month, day);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    private void encryptBoard(EmpVO vo) {
        // 입력받은 평문 비번을 암호화.
    	
        String encoded = encoder.encode(vo.getEmpPass());
        vo.setEmpPass(encoded);
    }

    
    /*
    // 사원목록 조회
    @Override
    public void empList(Pagination<EmpVO> pagination) {
        int totalRecord = dao.selectTotalRecord(pagination);
        pagination.setTotalRecord(totalRecord);
        List<EmpVO> dataList = dao.empList(pagination);
        pagination.setDataList(dataList);

    }
    */
    @Override
    public List<EmpVO> selectempList() {
    	return dao.selectempList();
    }
    

    @Override
    public EmpVO selectEmp(String empKey) {
        return dao.selectEmp(empKey);
    }

    @Override
    public void updateEmp(EmpVO vo) {
        dao.updateEmp(vo);
    }

    @Override
    public EmpVO retrieveEmpSecurity(String empId) {
        return dao.selectEmpSecurity(empId);
    }



}
