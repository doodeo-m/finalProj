<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.patient.dao.PatientDAO">
	<resultMap type="kr.or.ddit.vo.PatientVO" id="patientMap" autoMapping="true">
		<id property="patientKey" column="PATIENT_KEY"/>
		<association property="preDiagnosis" javaType="kr.or.ddit.vo.PreDiagnosisVO" autoMapping="true" />
		<association property="guardian" javaType="kr.or.ddit.vo.GuardianVO" autoMapping="true" />
		<association property="receiption" javaType="kr.or.ddit.vo.ReceiptionVO" autoMapping="true" /> <!-- 정민-수납대기환자뽑기 -->
		<association property="pay" javaType="kr.or.ddit.vo.PayVO" autoMapping="true" /> <!-- 정민-수납대기환자뽑기 -->
		<association property="payDetail" javaType="kr.or.ddit.vo.PayDetailVO" autoMapping="true" /> <!-- 정민 -->
	</resultMap>
	

	<!-- 환자 목록 조회 셀렉트문 -->
	<select id="selectPatientList" resultMap="patientMap">
		SELECT
			  A.PATIENT_KEY, A.PATIENT_NAME, A.PATIENT_AGE
				, A.PATIENT_SEX, A.PATIENT_REGNO1, A.PATIENT_REGNO2
				, A.PATIENT_PN, A.PATIENT_ADDRESS, A.PATIENT_ADDRESS_DETAIL
				, A.PATIENT_TYPE, A.PATIENT_SIGNIFICANT
				
				,B.PRE_DIAGNOSIS_KEY
				,B.PRE_DIAGNOSIS_EXPERIENCE
				,B.PRE_DIAGNOSIS_DISEASE
				,B.PRE_DIAGNOSIS_ALLERGY
				,B.PRE_DIAGNOSIS_PREGNANCY
				,B.PRE_DIAGNOSIS_CHOICE
				,B.PRE_DIAGNOSIS_DATE
		    
			FROM PATIENT A LEFT OUTER JOIN PRE_DIAGNOSIS B ON (A.PATIENT_KEY = B.PATIENT_KEY)
		ORDER BY PATIENT_KEY DESC
	</select>
	
	<!-- 환자 상세 조회하는 셀렉트문 -->
	<select id="selectPatient" resultMap="patientMap" parameterType="string">
		SELECT 
			A.PATIENT_KEY, A.PATIENT_NAME, A.PATIENT_AGE
			, A.PATIENT_SEX, A.PATIENT_REGNO1, A.PATIENT_REGNO2
			, A.PATIENT_PN, A.PATIENT_ADDRESS, A.PATIENT_ADDRESS_DETAIL
			, A.PATIENT_TYPE, A.PATIENT_SIGNIFICANT
			,B.PRE_DIAGNOSIS_KEY
			,B.PRE_DIAGNOSIS_EXPERIENCE
			,B.PRE_DIAGNOSIS_DISEASE
			,B.PRE_DIAGNOSIS_ALLERGY
			,B.PRE_DIAGNOSIS_PREGNANCY
			,B.PRE_DIAGNOSIS_CHOICE
			,B.PRE_DIAGNOSIS_DATE
            ,C.GUARDIAN_KEY, C.GUARDIAN_NAME, C.GUARDIAN_PN, C.GUARDIAN_RELATION
		FROM 
			  PATIENT A 
              LEFT OUTER JOIN PRE_DIAGNOSIS B ON (A.PATIENT_KEY = B.PATIENT_KEY)
              LEFT OUTER JOIN GUARDIAN C ON (A.PATIENT_KEY = C.PATIENT_KEY)
		WHERE A.PATIENT_KEY = #{patientKey}
	</select>
	
	<!-- 환자 신규 등록하는 인서트문 -->
	<insert id="insertPatient" parameterType="kr.or.ddit.vo.PatientVO">
		INSERT INTO patient (
		    patient_key, patient_name, patient_age
		    , patient_sex, patient_regno1, patient_regno2
		    , patient_pn, patient_address, patient_address_detail
		    , patient_type, patient_significant
				) VALUES (
		    'P' || LPAD(PATIENT_SEQ.NEXTVAL, 5, '0')
		    , #{patientName, jdbcType=VARCHAR}
		    , EXTRACT(YEAR FROM SYSDATE) - 
		        CASE WHEN SUBSTR(#{patientRegno1}, 1, 1) IN ('0', '1')
		             THEN TO_NUMBER(SUBSTR(#{patientRegno1}, 1, 2)) + 2000
		             ELSE TO_NUMBER(SUBSTR(#{patientRegno1}, 1, 2)) + 1900
		        END
		    , CASE WHEN SUBSTR(#{patientRegno2}, 1, 1) IN ('1', '3')
	               THEN 'M'
	               WHEN SUBSTR(#{patientRegno2}, 1, 1) IN ('2', '4')
	               THEN 'F'
	           END
		    , #{patientRegno1, jdbcType=NUMERIC}
		    , #{patientRegno2, jdbcType=NUMERIC}
		    , #{patientPn, jdbcType=VARCHAR}
		    , #{patientAddress, jdbcType=VARCHAR}
		    , #{patientAddressDetail, jdbcType=VARCHAR}
		    , #{patientType, jdbcType=VARCHAR}
		    , #{patientSignificant, jdbcType=VARCHAR}
		) 
	</insert>
	
		
	<!-- 환자 수정하는 업데이트문 -->
	<update id="updatePatient" parameterType="kr.or.ddit.vo.PatientVO">
		UPDATE PATIENT
		SET
		    PATIENT_NAME = #{patientName, jdbcType=VARCHAR},
		    PATIENT_SEX = (
		        CASE
		            WHEN SUBSTR(#{patientRegno2, jdbcType=NUMERIC}, 1, 1) IN ('1', '3') THEN 'M'
		            WHEN SUBSTR(#{patientRegno2, jdbcType=NUMERIC}, 1, 1) IN ('2', '4') THEN 'F'
		        END
		    ),
		    PATIENT_REGNO1 = #{patientRegno1, jdbcType=NUMERIC},
		    PATIENT_REGNO2 = #{patientRegno2, jdbcType=NUMERIC},
		    PATIENT_PN = #{patientPn, jdbcType=VARCHAR},
		    PATIENT_ADDRESS = #{patientAddress, jdbcType=VARCHAR},
		    PATIENT_ADDRESS_DETAIL = #{patientAddressDetail, jdbcType=VARCHAR},
		    PATIENT_TYPE = #{patientType, jdbcType=VARCHAR},
		    PATIENT_SIGNIFICANT = #{patientSignificant, jdbcType=VARCHAR},
		    PATIENT_AGE = EXTRACT(YEAR FROM SYSDATE) - 
		        CASE 
		            WHEN SUBSTR(#{patientRegno1, jdbcType=NUMERIC}, 1, 1) IN ('0', '1', '2')
		                THEN TO_NUMBER(SUBSTR(#{patientRegno1, jdbcType=NUMERIC}, 1, 2)) + 2000
		            ELSE
		                TO_NUMBER(SUBSTR(#{patientRegno1, jdbcType=NUMERIC}, 1, 2)) + 1900
		        END
		WHERE PATIENT_KEY = #{patientKey, jdbcType=VARCHAR}
	</update>
	
	
	<!-- 정민!!!!!!!!!!!!!!!!!!!! -->
	<select id="selectReceipMember" resultType="kr.or.ddit.vo.ReceiptionVO">
		SELECT RECEIPT.PATIENT_KEY, OFFICE_KEY, PATIENT.PATIENT_NAME, PATIENT.PATIENT_REGNO1 
		FROM RECEIPT
		INNER JOIN PATIENT
		ON (RECEIPT.PATIENT_KEY=PATIENT.PATIENT_KEY)
	</select>
	
	<!-- 정민 - 수납대기환자 뽑기 -->
	<select id="selectPayWaiting" resultMap="patientMap">
		SELECT
			A.PATIENT_KEY,
		    PATIENT_NAME,
		    A.PATIENT_REGNO1,
		    B.RECEIPT_STATUS,
		    PAY.PAY_CHECK,
		    PAY.PAY_TOTAL_COST
		FROM
		    PATIENT A
		    INNER JOIN RECEIPT B ON A.PATIENT_KEY = B.PATIENT_KEY
		    LEFT OUTER JOIN PAY ON B.RECEIPT_KEY = PAY.RECEIPT_KEY
		WHERE
		    B.RECEIPT_STATUS = 'RS02'
		    AND PAY_CHECK = 0
	</select>
	
	
	
</mapper>