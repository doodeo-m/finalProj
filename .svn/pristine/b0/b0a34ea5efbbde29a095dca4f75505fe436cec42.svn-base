package kr.or.ddit.radiology.cotroller;

import java.io.File;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.medicalChart.service.MedicalChartService;
import kr.or.ddit.radiology.service.RadiologyService;
import kr.or.ddit.vo.CommonCodeVO;
import kr.or.ddit.vo.RadiologyVO;
import kr.or.ddit.vo.WaitingHistoryVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/radiology")
public class RadiologyPageController {
	@Inject
	private RadiologyService radiologyService;
	
	// 파일타입
	@Value("#{appInfo.xRayData}")
	private File saveXrayFolder;
	@Value("#{appInfo.MRIData}")
	private File saveMRIFolder;
	
	// URL경로
	@Value("#{appInfo.xRayData}")
	private String XrayfolderURL;
	@Value("#{appInfo.MRIData}")
	private String MRIfolderURL;
	
	@PostConstruct
	public void init() {
		log.info("주입된 객체 saveXrayFolder : {}", saveXrayFolder);
		log.info("주입된 객체 saveMRIFolder: {}", saveMRIFolder);
	}
	
	@Inject
	private MedicalChartService medicalChartService;
	
	@GetMapping(value = "getWaitingList",produces = MediaType.APPLICATION_JSON_UTF8_VALUE )
	@ResponseBody
	public List<WaitingHistoryVO> getWaitingList(){
		List<WaitingHistoryVO> list = radiologyService.retrieveWaitingList();
		log.info("대기목록 조회 : {}",list);
		return list;
	}
	
	@GetMapping(value = "getradiologyData", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseBody
	public RadiologyVO getradiologyData(@RequestParam("orderKey") String orderKey) {
		RadiologyVO radiology = radiologyService.retrieveRadiology(orderKey);
		if( radiology == null) { // 오더키로 조회한 자료가 없으면
			radiology = new RadiologyVO(); // 비어있는 radiologyVO생성해서 넘기기
		}
		log.info("radiology자료 조회 : {}", radiology);
		return radiology;
	}
	@GetMapping(value = "getBodyPartList",produces = MediaType.APPLICATION_JSON_UTF8_VALUE )
	@ResponseBody
	public List<CommonCodeVO> getBodyPartList(){
		List<CommonCodeVO> bodyList = medicalChartService.retrieveBodyPartList();
		return bodyList;
	}
	
	
	//-------------------------------------------------------------------------------------------
	
	@PostMapping(value = "UploadData", produces = "text/plain")
	@ResponseBody
	public String UploadData(@RequestPart("filename") List<MultipartFile> multiFiles , HttpServletRequest req) {
		String radCont = req.getParameter("radCont").replace("\r\n", "<br>");
		String orderKey = req.getParameter("orderKey");
		String empKey = req.getParameter("empKey");
		
		RadiologyVO radiology = new RadiologyVO();
		radiology.setOrderKey(orderKey);
		radiology.setRadCont(radCont);
		radiology.setEmpKey(empKey);
		radiology.setAddFiles(multiFiles, XrayfolderURL);
		log.info("확인 데이터 radiology : {}", radiology);
		
		int cnt = radiologyService.createxrayData(radiology);
		log.info("확인 데이터 radiology : {}", radiology);
		 
		String result = "";
		
		if(cnt > 0) {
			result = "success";
		}else {
			result = "fail";
		}
		
		return result;
	}
}
