package kr.or.ddit.attach.service;

import java.io.File;
import java.io.IOException;
import java.util.Optional;

import javax.inject.Inject;

import org.springframework.stereotype.Service;

import kr.or.ddit.attach.dao.AttachFileGroupDAO;
import kr.or.ddit.vo.AttachVO;
import kr.or.ddit.vo.AttatchFileGroupVO;
import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class AttachFileGroupServiceImpl implements AttachFileGroupService {
	@Inject
	private AttachFileGroupDAO attachFileGroupDAO;
	

	@Override
	public int insertAttachFileGroup(AttatchFileGroupVO fileGroup, File saveFolder) {
		log.info("fileGroup 데이터 확인 ={}", fileGroup);
		log.info("saveFolder 데이터 확인 ={}", saveFolder);
		int rowCnt = Optional.ofNullable(fileGroup.getAttFileList())
							.filter((afl)->!afl.isEmpty())
							.map((afl)-> attachFileGroupDAO.insertAttachFileGroup(fileGroup))
							.orElse(0);
		if(rowCnt>0) {
			processAttatchFileGroupBinary(fileGroup, saveFolder);
		}
		return rowCnt;
	}
	// 지정된 경로에 저장하는 process Method
	private void processAttatchFileGroupBinary(AttatchFileGroupVO fileGroup, File saveFolder) {
		fileGroup.getAttFileList().stream()
				.forEach((af)->{  
					try {
						af.saveTo(saveFolder);
					}catch (IOException e) { throw new RuntimeException(e); }
		});
	}
	

	@Override// 이거 사용안함..
	public AttachVO selectAttachFile(AttachVO filecondition) {
		return attachFileGroupDAO.selectAttachFIle(filecondition);
	}

	@Override// 파일 리스트 조회할 때 사용
	public AttatchFileGroupVO selectFileList(int fileGroupNo) {
		return attachFileGroupDAO.selectFileList(fileGroupNo);
	}


}
