<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<style>
	.grid-stack{
		height: 100hv;
	}
/* 	.grid-stack-item{ */
/* 		border-radius: 1rem;  */
/* 	} */
	.card{
		margin: 0;
		--vz-card-inner-border-radius : 1rem;
		background-color : white;
	}
	.card-header{
		border-radius: 30px;
		background-color : #405189;
		color : white;
	}
	.rtBtn{
		float: right;
	}
	.nav-tabs .nav-link.active{
		background-color: #405189;
		color: white;
	}
	.ptTableForm{
		text-align: center;
	}
	#equipmentModalDiv > div{
		border: 1px solid black;
		width: 100%;
	}
	#equipmentModalDiv{
		display: flex;
		justify-content: center;
	}
	.modal-content{
		border-radius: 30px;
	}
	#eqDetailBtn{
		display: flex;
		justify-content: center;
		margin-top: 10px;
	}
	
    .grid-stack-item-content::-webkit-scrollbar {
         width: 5px;
         overflow-y: auto;
     }

     .grid-stack-item-content::-webkit-scrollbar-thumb {
         height: 30%;
         /* 스크롤바의 길이 */
         background: #d0d0d0a9;
         /* 스크롤바의 색상 */

         border-radius: 10px;
     }
     
     .bedImages{
     	width: 160px;
     	height: 120px;
     }
     .nowPtbedsStatusDiv{
     	display: flex;
     	justify-content: space-around;
     }
      .nowPtbedsStatusDiv > div:first-child{ 
      	margin-bottom: 0px; 
      }
      #ptStartModalBodyDiv{
      	display: flex;
      	   justify-content: space-around;
      	
      }
</style>
<div class="grid-stack"> 

	<div class="grid-stack-item" gs-x="0" gs-y="0" gs-w="3" gs-h="3">
		<div class="grid-stack-item-content form-control">
			<div class="item-header">
				<h5>물리치료 대기환자 조회</h5>
				<hr>
			</div> 
			
		<div class="item-body">
		
				<div id="ptWaitingListDiv" style="height: 300px;">
					<table class="table table-bordered ptTableForm">
						<thead class='table table-info table-striped'>
							<tr class="patientTr">
								<th style="width: 10%">환자코드</th>
								<th style="width: 23%">환자명<br/>[성별/나이]</th>
								<th style="width: 12%">상태</th>
								<th style="width: 15%">처방시간</th>
								<th style="width: 15%">환자상세</th>
							</tr>
						</thead>
						<tbody id="waitingListBody">
								<!-- 대기환자 목록 들어오는 위치 -->
						</tbody>
					</table>
				</div>
			
		</div>
		
		</div>
	</div>
	
	<div class="grid-stack-item" gs-x="0" gs-y="5" gs-w="3" gs-h="2">
		<div class="grid-stack-item-content form-control">
			<div class="item-header">
				<h5>환자 진료 차트</h5>
				<hr>
			</div> 
			<div class="item-body">
				<div id="patientChartDiv" style="height: 230px;">
					<table  class="table table-bordered" >
						<tr>
							<th class="table-info">환자코드</th>
							<td id="chPatientKey"><!-- 차트 환자키 들어올 자리 --></td>
							<th class="table-info">환자명</th>
							<td id="chPatientName"><!-- 환자명 들어올 자리 --></td>
						</tr>
						<tr>
							<th  class="table-info" colspan=4">P.I</th>
						</tr>
						<tr>
							<td colspan=4" id="chPI">
							</td>
						</tr>
						<tr>
							<th  class="table-info" colspan=4">D.I</th>
						</tr>
						<tr>
							<td colspan=4" id="chDI">
							</td>
						</tr>
					</table>				
				</div>
			</div>	
			
		</div>		
	</div>
	
	<div class="grid-stack-item" gs-x="3" gs-y="0" gs-w="6" gs-h="3">
		<div class="grid-stack-item-content form-control">
		<div class="item-header">
			<h5>치료실 침상 현황 조회</h5>
			<hr>
		</div>
		
		<div class="item-body">
			<div id="nowBedStatusList">
				<div class="nowPtbedsStatusDiv" id="nowPtbedsStatusTop">
					<!-- 침상 1-4 들어오는 위치-->
					<div id="bedKey1">
					</div>
					<div id="bedKey2">
					</div>
					<div id="bedKey3">
					</div>
					<div id="bedKey4">
					</div>
				</div>
				<div class="nowPtbedsStatusDiv" id="nowPtbedsStatusbottom">
					<!-- 침상 5-8 들어오는 위치-->
					<div id="bedKey5">
					</div>
					<div id="bedKey6">
					</div>
					<div id="bedKey7">
					</div>
					<div id="bedKey8">
					</div>
				</div>
			</div>
		</div>
		
		</div>
	</div>
	
	<div class="grid-stack-item" gs-x="3" gs-y="5" gs-w="6" gs-h="2">
		<div class="grid-stack-item-content form-control">
			<div class="item-header">
				<h5>물리치료 액팅</h5>
				<hr>
			</div>
			<div class="item-body">
				<div id="actingFormDiv" style="height: 230px;">
					<form id="actingForm" method="post" action="${pageContext.request.contextPath}/actingCommentUpdate.do">
						<table class="table table-bordered ptTableForm">
							<tr>
								<th class="table-info" id="acting">환자명</th>
								<td id="acPatientName"><!-- 액팅할 환자명이 들어올 자리 --></td>
								<th class="table-info">나이/성별</th>
								<td id="acPatientAge"><!-- 액팅할 환자 나이,성별이 들어올 자리 --></td>
							</tr>
							<tr>
								<th class="table-info">진단명</th>
								<td id="acPatientDi"><!-- 액팅할 환자 진단명이 들어올 자리 --></td>
								<th class="table-info">주치의</th>
								<td id="acDrName"><!-- 주치의 이름 들어올 자리 --></td>
							</tr>
							<tr>
								<td colspan=4">
									<div class="form-floating">
										 <textarea class="form-control" placeholder="Leave a comment here" id="floatingTextarea2" style="height: 100px"></textarea>
										 <label for="floatingTextarea2">Comments</label>
									</div>
								</td>
							</tr>
							<tr>
								<td colspan="4"><input id="actingBtn" type="submit" class="btn btn-primary callBtn" value="액팅하기"></td>
							</tr>
						</table>
					</form>
				</div>
			</div>
		</div>
	</div>
	
	<div class="grid-stack-item" gs-x="9" gs-y="0" gs-w="3" gs-h="3">
		<div class="grid-stack-item-content form-control">
			<div class="item-header">
				<h5>물리치료 기구조회</h5>
				<hr>	
			</div>
			<div class="item-body">
				<table class="table table-bordered ptTableForm">
					<tr class="table table-info table-striped">
						<th>기구명</th>
						<th>현재상태</th>
					</tr>
					<tr>
						<td>Shoulder-CPM</td>
						<td>[사용가능]</td>
					</tr>
					<tr>
						<td>ICT</td>
						<td>[사용중]</td>
					</tr>
					<tr>
						<td>TENS</td>
						<td>[사용가능]</td>
					</tr>
				</table>
			</div>
		</div>
	</div>
	
	<div class="grid-stack-item" gs-x="9" gs-y="5" gs-w="3" gs-h="2">
		<div class="grid-stack-item-content form-control">
			<div class="item-header">
				<h5>치료기구 상태관리</h5>
				<hr>
			</div>
			<div class="item-body">
				<div id="ptEquipmentDiv"  style="height: 230px;">
					<table class="table table-bordered ptTableForm" id="ptEquipmentTable">
					<thead>
						<tr class="table table-info table-striped">
							<th>기구명</th>
							<th>모델명</th>
						</tr>
					</thead>
					<tbody id = "ptEquipmentTbody">
					<!-- 치료기구 상태관리 목록 들어오는 위치  -->
					</tbody>
					</table>
				</div>
			</div>
		</div>
	</div>
	
	<!----------------------------------------------- 치료기구 상태관리 상세 모달창 ----------------------------------------------------->
		<!-- Grids in modals -->
		<div class="modal fade" id="ptEquipmentStatusModal" tabindex="-1" aria-labelledby="exampleModalgridLabel" aria-modal="true">
		    <div class="modal-dialog modal-xl">
		        <div class="modal-content">
		        	<div class="card">
		        		<div class="card-header" id="noticeCardHeader">물리치료기구 상세관리
		        			<button style="float: right;" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" ></button>
		        			
		        		</div>
		        		<div class="card-body">
		        			<div id="equipmentModalDiv">
			        			<div id="equipmentDetailDiv">
			        				<h4 style="text-align: center;">물리치료기구 상세정보</h4>
									<div id="equipmentDetailTableDiv">
										<!-- 물리치료기구 상세내용 들어오는 위치 -->
									</div>

									<div id="eqDetailBtn">
										<input type="checkbox" class="btn-check" id="btn-check-outlined" autocomplete="off">
										<label class="btn btn-outline-primary" for="btn-check-outlined" style="margin-right: 10px;">수리신청</label>

										<input type="checkbox" class="btn-check" name="bedKey-outlined" id="success-outlined" autocomplete="off">
										<label class="btn btn-outline-success" for="success-outlined">수리중</label>	

										<input type="checkbox" class="btn-check" name="bedKey-outlined" id="danger-outlined" autocomplete="off">
										<label class="btn btn-outline-danger" for="danger-outlined"  style="margin-left: 10px;">폐기신청</label>
									</div>	

			        			</div>
			        			
								<div class="" id="equipmentStatusContentDiv">
									<h4>물리치료기구 상태점검표</h4>
			        				<table class='table table-bordered' style='width: 90%; margin:auto; text-align: center;'>
			        					<thead class='table-primary'>
											<tr>
												<th colspan="3">상태점검표</th>	
											</tr>
											<tr>
												<th style="width: 15%">점검일</th>
												<th>점검내용</th>
												<th style="width: 15%">작성자</th>
											</tr>
										</thead>	
									</table>
									<div id="equipmentStatusDiv"  style="height: 200px;">
										<table class='table table-bordered' style='width: 90%; margin:auto; text-align: center;'>
											<tbody id="equipmentStatusTbody">
												<!-- 점검내용 들어오는 위치 -->
											</tbody>
										</table>
									</div>
									<table class='table table-bordered' style='width: 90%; margin:auto; text-align: center;'>
										<tfoot>
												<tr>
													<td colspan="3">
														<div style="display:inline;">
															<form id="ptEqStatusInsertForm" method="post" action="${pageContext.request.contextPath}/ptEquipmentStatusInsert.do" style="display: flex; justify-content: space-around;">
																<select name="equipmentRecordStatus" class="form-select-sm" aria-label="Default select example" style="width: 22%;">
																	<option selected id="eqOptDefault">장비 상태</option>
																	<option value="EAS1">상</option>
																	<option value="EAS2">중</option>
																	<option value="EAS3">하</option>
																</select>
																<input class="form-control form-control-sm" type="text" name="equipmentRecordContent" style="width: 70%;" placeholder="점검사항을 입력하세요" aria-label=".form-control-sm example">
																<input id="eqStatsuBtn" class="btn btn-primary callBtn" type="submit" value="작성"> 
															</form>
														</div>
													</td>
												</tr>
										</tfoot>
									</table>

			        			</div> <!-- equipmentStatusContentDiv 끝 -->
			        			
		        			</div>
		        		</div>
		        	</div>
		        </div>
		    </div>
		</div>
	<!------------------------------------------------------------------------------------------------------------------------->
	
	<!-- 침상선택 후 치료진행 모달 ----------------------------------------------------------------------------------------------------->
	<div id="ptStartBedModal" class="modal" tabindex="-1">
	  <div class="modal-dialog">
	    <div class="modal-content">
	      <div class="modal-header">
	        <h5 class="modal-title" id="ptStartModalTitle">번 침상 치료 진행하기</h5>
	        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
	      </div>
	      <div class="modal-body">
	      	<div id="ptStartModalBodyDiv">
	      		<div id="patientDiv">
	      			<p>환자를 선택하세요.</p>
	      			<!-- 환자목록 -->
	      			<div id="ptStartPatientList">
	      				<select id="ptStartPatientSelect" class="form-select" aria-label="Default select example">
	      					<option>-- 치료환자 선택 --</option>
	      				</select>
	      			</div>
	      		</div>
	      		
	      		<div id="eqDiv">
			        <p>치료기구를 선택하세요.</p>
	     			<!-- 오더 내역에 있는 치료 도구 목록이 들어와야한다. -->
			        <div id="ptOrderEquipmentList">
						<select id="ptStartEquipmentSelect" class="form-select" aria-label="Default select example">	
							<option>-- 치료기구 선택 --</option>
						</select>
		   			</div>
	      		</div>
	      	</div>
	      </div>
	      <div class="modal-footer">
	        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
	        <form id="ptStartForm" method="post" action="${pageContext.request.contextPath}/ptRoomStatusUpdate.do">
	      		<input type="hidden" value="" name="receiptKey">
	        	<input id="ptStartSubmit" type="submit" class="btn btn-primary" value="치료진행하기">
	        </form>
	      </div>
	    </div>
	  </div>
	</div>
	
	<!------------------------------------------------------------------------------------------------------------------------->
	
	
</div>

<script>

// GridStack -------------------------------------------------------------------------
var grid = GridStack.init({});
$("tbody:not(.disable)").on("click", ".datatr", function(event){
	$(this).siblings(".datatr").removeClass("active");
	$(this).toggleClass("active");
});
//------------------------------------------------------------------------------------ 

// 대기환자 조회 리스트 --------------------------------------------------------------------- 
const waitingListBody = $("#waitingListBody");

const ptWaitingList = () =>{
	$.getJSON("${pageContext.request.contextPath}/ptWaitingPatientList.do").done(function(resp){
		let waitingList = resp;
		
		// localStorage에 resp 저장
		let waitingData = JSON.stringify(resp)
		localStorage.setItem("waitingData",waitingData);
		
		console.log("waitingData : ",waitingList);
		
		let waitingTrTags = [];
		
		if(waitingList.length > 0){
			$.each(waitingList, function(idx, waiting){
				 let waitingStatusTd;
				    if (waiting.waitingList[0].waitingStatusName == "치료중") {
				      waitingStatusTd = $("<td style='color:#BD5108'>").html(waiting.waitingList[0].waitingStatusName);
				    } else {
				      waitingStatusTd = $("<td>").html(waiting.waitingList[0].waitingStatusName);
				    }
				let trs = $("<tr onclick='fn_patientChartDetail(\"" + waiting.patientKey + "\", \"" + waiting.waitingList[0].waitingKey + "\");'>").append(
					$("<td>").html(waiting.patientKey),
					$("<td>").html(waiting.patient.patientName + " [" + waiting.patient.patientSex + "/" + waiting.patient.patientAge + "]"),
					waitingStatusTd,
					$("<td>").html(waiting.waitingList[0].waitingChangeTime),
					$("<td>").append(
						$("<input type='button' class='btn btn-primary callBtn' data-waitkey="+ waiting.waitingList[0].waitingKey +" onclick=\'fn_openPatientDetail(\"" + waiting.patientKey + "\");' value='조회'>")		
					),
				).addClass("datatr");
				waitingTrTags.push(trs);
			});
			
			
			
		}else{
			waitingTrTags.push(
				$("<tr>").html($("<td colspan='5'>").html("현재 대기환자가 없습니다."))		
			)
		}
		waitingListBody.empty();
		waitingListBody.append(waitingTrTags);
	})
}
ptWaitingList();
//------------------------------------------------------------------------------------------- 


// 환자 상세정보 모달 보기 !!! 유림이가 만들어줄거야 !!! ---------------------------------------------------
let fn_openPatientDetail = () =>{
	
	
}
//-------------------------------------------------------------------------------------------- 


//  침상 사용중 일때 ptStartBedModal 막는 함수 --------------------------------------------------------
const fn_offStartBedModal = () =>{
	 // --------------------------------- localStorage에서 침상 상태 데이터 꺼내기
	let bedStatusData = JSON.parse(localStorage.getItem("bedStatusData"));
    console.log("세션bedStatusData",bedStatusData);
    
    $.each(bedStatusData, function(idx, bedStatus){
    	if(bedStatus.ptBedStatus==="BS02"){
    		let ptBedKey = bedStatus.ptBedKey;
    		$("#bedKey"+ptBedKey).off("click");
    	}
    });
}
//-------------------------------------------------------------------------------------------- 


// 물리치료 치료진행 모달  ---------------------------------------------------------------------------
const ptStartBedModal = $("#ptStartBedModal");

let ptBedClick = () => {
	
	let bedStatusData = JSON.parse(localStorage.getItem("bedStatusData"));
    
  $('div[id^="bedKey"]').on("click", function(){
	  
    let thisID = $(this).attr('id');
    let bedKey = thisID.replace(/\D/g, '');
    $("#ptStartModalTitle").html(bedKey+"번 침상 치료 진행");
	
    $("#ptStartSubmit").data("bedkey", bedKey);
    $("[name=ptBedKey]").val(bedKey);
    
    let dataList = JSON.parse(localStorage.getItem("waitingData"));
   	
    // 치료중인 침상 클릭 이벤트 막는 함수
   	fn_offStartBedModal();
   	
    // 치료진행 모달 열기
    $("#ptStartBedModal").modal('show');
    
    let ptStartPatientSelect = $("#ptStartPatientSelect");
    
    // 대기중 상태 환자 이름 셀렉트박스 옵션 리스트 생성
    let ptPatientList = [];
    if (dataList.length > 0) {
      $.each(dataList, function(idx, ptStartP){
    	  if(ptStartP.waitingList[0].waitingStatus == "WS01"){
		    	let tags = $("<option class='ptStartPOpt'>").html(ptStartP.patientName).data("patientkey", ptStartP.patientKey);
		        ptPatientList.push(tags);
    	  }
      });
      ptStartPatientSelect.append(ptPatientList);
    } else {
      let tags = $("<option class='ptStartPOpt'>").text("대기중인 환자가 없습니다.");
      ptPatientList.push(tags);
      ptStartPatientSelect.append(ptPatientList);
    }
  });
	
  // 환자 옵션 셀렉트 변경 때 마다 기구옵션리스트 다시 가져온다.
  let eqSelect = () => {
    $("#ptStartPatientSelect").on("change", function(){
      let patientKey = $(this).find("option:selected").data("patientkey");
      console.log("patientkey :", patientKey);

      $.getJSON("${pageContext.request.contextPath}/ptEquipmentSelectList.do?who="+patientKey).done(function(resp){
        let ptEqList = resp;
        console.log("ptEqList : ", ptEqList);

        let orderKey = ptEqList[0].orderKey;
        let eqKey = ptEqList[0].equipmentKey;

        $("#ptStartEquipmentSelect").attr("data-patientkey", patientKey);
        $("#ptStartEquipmentSelect").attr("data-orderkey", orderKey);
        $("#ptStartEquipmentSelect").attr("data-eqkey", eqKey);

        // form 안 hidden value에 넣기
        $("[name=receiptKey]").val(ptEqList[0].receiptKey);
        
        let ptStartEquipmentSelect = $("#ptStartEquipmentSelect");

        // 해당 환자마다 기구 셀렉트 옵션리스트 가져오기
        let orderEqList = [];
        if (ptEqList.length > 0) {
          $.each(ptEqList, function(idx, ptEq){
            let tags = $("<option class='ptEqOpt' data-pteqkey=" + ptEq.ptEquipmentKey + ">").html(ptEq.equipmentName+"["+ ptEq.ptEquipmentCode +"]");
            orderEqList.push(tags);
          });
          
          ptStartEquipmentSelect.empty().append(
        	$("<option>").text("-- 치료기구 선택 --")		  
          );
          ptStartEquipmentSelect.append(orderEqList);
        } else {
          let tags = $("<option class='ptEqOpt'>").text("해당 기구가 없습니다.");
          orderEqList.push(tags);
          ptStartEquipmentSelect.empty().append(orderEqList);
        }
      });
    });

    // 셀렉트 박스 닫으면 해당 옵션리스트 지운다. (다시 가져오기 위해서)
    $("#ptStartEquipmentSelect").on("show.bs.dropdown", function () {
      $('.ptEqOpt').remove();
    });
  };

  eqSelect();
  
  // 셀렉트 박스 옵션 변경때마다 선택값 다시 넣어주기
  $("#ptStartPatientSelect").on("change", function() {
	  let selectedPatient = $(this).val();
	  $(this).data("selected-patient", selectedPatient);
	});
  
  $("#ptStartEquipmentSelect").on("change", function() {
	  let selectedEq = $(this).val();
	  $(this).data("selected-eq", selectedEq);
	});
  
}
ptBedClick();


// 모달 닫으면 내용 초기화 -------------------------------------------------------------------
$("#ptStartBedModal").on('hide.bs.modal', function(event) {
	console.log("모달 닫았다.");
	$(".ptStartPOpt").remove();
	$(".ptEqOpt").remove();
});
//------------------------------------------------------------------------------------ 

// 치료도구 목록 셀렉트 박스 -----------------------------------------------------------------
const fn_ptStartEqOptionList = (patientKey) =>{
	console.log("patientKey : ", patientKey);
	
	$.getJSON("${pageContext.request.contextPath}/ptEquipmentSelectList.do?who="+patientKey).done(function(resp){
		let ptEqList = resp;
		console.log("ptEqList : ",ptEqList);
		
		let orderKey = ptEqList[0].orderKey;
		let eqKey = ptEqList[0].equipmentKey;

		$("#ptEquipmentSelect").attr("data-patientkey", patientKey);
		$("#ptEquipmentSelect").attr("data-orderkey", orderKey);
		$("#ptEquipmentSelect").attr("data-eqkey", eqKey);

		let ptStartEquipmentSelect = $("#ptStartEquipmentSelect");
		
		let orderEqList = [];
		if(ptEqList.length>0){
			$.each(ptEqList, function(idx, ptEq){
				let tags = $("<option class='ptEqOpt' data-pteqkey=" + ptEq.ptEquipmentKey + ">").html(ptEq.equipmentName+"["+ ptEq.ptEquipmentCode +"]")
				orderEqList.push(tags);
			});
			ptStartEquipmentSelect.append(orderEqList);
		}else{
			let tags = $("<option class='ptEqOpt'>").text("해당 기구가 없습니다.")
				orderEqList.push(tags);	
		}
		ptStartEquipmentSelect.append(orderEqList);
	});
}
//------------------------------------------------------------------------------------ 




// 치료 진행 하기 / 기록지 추가, 상태변경(치료중), 침상 현황 변경 ---------------------------------------
const ptStartForm = $("#ptStartForm");

	ptStartForm.on("submit", function(event){
		event.preventDefault();
		
		let bedKey = $("#ptStartSubmit").data("bedkey");
		
		bedKey = parseInt(bedKey);
		
		console.log("bedKey :", parseInt(bedKey));
		
		let selectPatient = $("#ptStartPatientSelect").data("selected-patient");
		let selectEq = $("#ptStartEquipmentSelect").data("selected-eq");
		let receiptKey = $("[name=receiptKey]").val();
		
		console.log("selectPatient",selectPatient);
		console.log("selectEq",selectEq);

		
		let orderKey = $("#ptStartEquipmentSelect").data("orderkey");
		
		console.log("orderKey ??? : ",orderKey);
		
		let data = {
			ptBedKey : bedKey,
			orderKey : orderKey,
			ptBedStatus : "BS02"
		}

		let bedDivId = "bedKey"+bedKey;
		let bedDivElement = $("#"+bedDivId);
		
		
 		// 침상상태 업데이트 (사용중) ----------------------------------------------------------- + orderKey 꽂아넣기 추가
		$.ajax({
			method : "post",
			url : "${pageContext.request.contextPath}/ptRoomStatusUpdate.do",
			data : JSON.stringify(data),
			contentType : 'application/json; charset=utf-8',
			dataType : "text",
			beforeSend: function (xhr) {   /*데이터를 전송하기 전에 헤더에 csrf값을 설정한다*/
            	xhr.setRequestHeader("${_csrf.headerName}", "${_csrf.token}");
        	}, 
			success : function(resp) {
				console.log("침상 사용상태 업데이트 성공");
			},
			error: function (request, status, error) {
	        console.log("code: " + request.status)
	        console.log("message: " + request.responseText)
	        console.log("error: " + error);
	    	}
		});

		let ptEqKey = $("#ptStartEquipmentSelect option:selected").data("pteqkey");
		let patientkey = $("#ptStartEquipmentSelect").data("patientkey");
	
 		// 장비 상태 변화 (사용중) ------------------------------------------------------------
		$.ajax({
			method : "post",
			url : "${pageContext.request.contextPath}/ptEuipmentStatusUpdate.do",
			data : JSON.stringify(ptEqKey), 
			contentType : 'application/json; charset=utf-8',
			dataType : "text",
			beforeSend: function (xhr) {   /*데이터를 전송하기 전에 헤더에 csrf값을 설정한다*/
            	xhr.setRequestHeader("${_csrf.headerName}", "${_csrf.token}");
        	}, 
			success : function(resp) {
				console.log("장비 상태 업데이트 성공");
			},
			error: function (request, status, error) {
				console.log("code: " + request.status)
				console.log("message: " + request.responseText)
				console.log("error: " + error);
	    	}
		});

		
		let equipmentKey = $("#ptStartEquipmentSelect").data("eqkey");

		
		
		
		// 침상번호, 오더키, 징비키 가져와야함
		let ptRecordData = {
							    ptBedKey: bedKey,
							    orderKey: orderKey,
							    equipmentKey: equipmentKey,
							    receiptKey: receiptKey
							};
		
		// 치료 기록 추가, 상태 치료중으로 변경, 대기목록 리스트 다시 가져와야한다. ----------------------------------------------- 
		$.ajax({
				    method: "POST",
				    url: "${pageContext.request.contextPath}/ptRecordInsert.do?receiptKey=" + receiptKey,
				    data: JSON.stringify(ptRecordData),
				    contentType: 'application/json; charset=utf-8',
				    dataType: "text",
				    beforeSend: function (xhr) {
				        xhr.setRequestHeader("${_csrf.headerName}", "${_csrf.token}");
				    },
				    success: function (resp) {
				        console.log("치료 기록 인서트 성공");
				        
				        // 침상 현황 다시 가져와야 한다. -> 다시 가져오려면 ? 안에 지워야한다. bedDiv 셀렉해서 그 안에 내용 지우기
				        $("#ptStartBedModal").modal("hide");
				        $(".nowPtbedsStatusDiv").find("[id^='bedKey']").empty();
				        ptRoomStatusImgList();
				        
				        // 대기환자 리스트도 다시 가져와야한다.
				        $("#waitingListBody").empty();
				        ptWaitingList();
				    },
				    error: function (request, status, error) {
				        console.log("code: " + request.status);
				        console.log("message: " + request.responseText);
				        console.log("error: " + error);
				    }
				});
		return false;
	})
// -------------------------------------------------------------------------------------------------------- 


// 침상 상태 현황 ---------------------------------------------------------------------------------------------

const ptRoomStatusImgList = () =>{
	$.getJSON("${pageContext.request.contextPath}/ptRoomStatusSelect.do").done(function(resp){
		let bedStatus = resp;
		console.log("bedStatus : ",bedStatus);
		
		// bedStatus.ptBedStatus == "BS02" , bedStatus.ptBedKey == 같은 div의 모달은 열리지 않도록.... 
		// localStorage에 resp 저장 (침상키, 침상상태)
		let bedStatusData = JSON.stringify(resp)
		localStorage.setItem("bedStatusData",bedStatusData);
		
		$.each(bedStatus, function(idx, status){
				if(status.ptBedStatus=="BS01"){
					$("#bedKey"+status.ptBedKey).append(
						$("<p>").html("[No."+ status.ptBedKey +"]"),
						$("<img class='bedImages' src='${pageContext.request.contextPath}/resources/images/pt_bed_able.jpg'>"),
						$("<p>").text("사용가능")
					)
				}else if(status.ptBedStatus=="BS02"){
					$("#bedKey"+status.ptBedKey).append(
						$("<p>").html("[No."+ status.ptBedKey +"]"),
						$("<img class='bedImages' src='${pageContext.request.contextPath}/resources/images/pt_bed_unable.jpg'>"),
						$("<p class='ptIngPatientName'>"),
						// 치료진행시간 계산 함수에서 데이터 넣어줌
						$("<p class='ptStartTime'>")
					)
					
					// 오더 넣어서 치료 진행 데이터 불러오는 ajax 호출
					let orderKey = status.orderKey;
					console.log("orderKey 있니 ......  : ",orderKey);
					$.getJSON("${pageContext.request.contextPath}/ptBedStatusDetail.do?orderKey="+orderKey).done(function(resp){
						let bedDetail = resp;
						
						// Date에 들어갈 시간데이터
						let sy = bedDetail.ptRecordDate[0];
						let smon = bedDetail.ptRecordDate[1];
						let sd = bedDetail.ptRecordDate[2];
						let sh = bedDetail.ptRecordDate[3];
						let smin = bedDetail.ptRecordDate[4];
						let ss = bedDetail.ptRecordDate[5];
						
						$("#bedKey"+bedDetail.ptBedKey).find("[class='ptIngPatientName']").html(bedDetail.patientName+" ["+ bedDetail.equipmentName +"]");
						
						let ptBedKeyDiv = document.getElementById("bedKey" + bedDetail.ptBedKey);
						let ptBedKey = bedDetail.ptBedKey;
						// 치료 시간 함수 실행 
						ptTimer(new Date(sy,smon,sd,sh,smin,ss), ptBedKeyDiv, ptBedKey);
					})
				} // 침상 상태 사용중일때 끝
			})
		})
	}
ptRoomStatusImgList();
//------------------------------------------------------------------------------------------- 


//치료 진행시간 계산해서 침상현황에 출력하는 함수 -----------------------------------------------------------

// a: 치료시간, b:시간 나올 위치, c: 치료종료 버튼 이벤트 파라미터(침상번호)
const ptTimer = (a,b,c) =>{
	let ptStart = moment(a);
	let ptTime = ptStart.subtract(1, "months");
	let ptRealTime = ptTime.format()
	
	let intervalId = setInterval(()=>{
		
		ptStart.add(1, "s");

		// 현재시간 - 치료시작시간 => 치료 진행시간 계산
		let test = moment().diff(ptRealTime, 'milliseconds');
		let duration = moment.duration(test);
		let formattedTime = moment.utc(duration.as('milliseconds')).format('mm:ss');

		let ptMin = moment().diff(ptRealTime, 'minutes');
		if(ptMin >= 2){
			clearInterval(intervalId);
			$(b).find("[class='ptStartTime']").remove();
			$(b).append(
				$("<button id='ptEnd' class='btn btn-primary' onclick=\'fn_actingDataInput(" + c + ")'>").text("치료종료")
				)
		}else{ // 치료 진행시간 출력
				if(ptMin>=1){
					$(b).find("[class='ptStartTime']").text("진행시간 : "+formattedTime).css("color : red");
				}else{
					$(b).find("[class='ptStartTime']").text("진행시간 : "+formattedTime);
				}
			}
		}, 1000);
		return intervalId;
}
//------------------------------------------------------------------------------------- 


// 치료기구 상태관리 목록 -------------------------------------------------------------------- 

const ptEquipmentTbody = $("#ptEquipmentTbody");

const ptEquipmentList = ()=>{
	$.getJSON("/FinalPJ/ptEquipmentList.do").done(function(resp){
		let equipmentList = resp;
		
		console.log("equipmentList:", equipmentList);
		let equipmentTrTags = [];
		
			$.each(equipmentList, function(idx, equipment){
				// 영상과 기구 제외하고 출력하기 
				if(!(equipment.equipmentKey==12 || equipment.equipmentKey==13)){
					let trs = $("<tr onclick='fn_openEquipmentModal( " + equipment.equipmentKey + " );'>").append(
								$("<td>").html(equipment.equipmentName),		
								$("<td>").html(equipment.equipmentModel)		
								).addClass("datatr").data("source", equipment);	
					equipmentTrTags.push(trs);
				}
			});
		ptEquipmentTbody.append(equipmentTrTags);
	})
}
ptEquipmentList();
//------------------------------------------------------------------------------------ 


// 치료 기구 상태관리 상세보기 ---------------------------------------------------------------- 

const equipmentDetailTableDiv = $("#equipmentDetailTableDiv");
const equipmentDetailTableDiv2 = $("#equipmentDetailTableDiv2");

//모달 열었을 때 해당기구 데이터 출력 ---------------------------------
const fn_openEquipmentModal = (equipmentKey) =>{
	console.log(equipmentKey);
	$("#ptEquipmentStatusModal").modal("show");
	fn_equipmentStatusDetail(equipmentKey);
	fn_equipmentStatusRec(equipmentKey);
}

// 모달 닫히면 데이터 리셋 -----------------------------------------
const fn_closeEquipmentModal = () =>{
	$("#ptEquipmentStatusModal").modal("hide");
	$("#equipmentDetailTableDiv2").remove();
	$("#equipmentStatusTbody").empty();
}

const fn_equipmentStatusDetail = (equipmentKey) =>{

	$.getJSON("/FinalPJ/ptEquipmentDetail.do?what=" + equipmentKey).done(function(resp){
		console.log(resp);
		let equipmentDetail = resp;
		let equipmentKey = resp.equipmentKey;

		if(equipmentDetail!=null){
			let equipmentDetailTags = equipmentDetailTableDiv.append(
				$("<div id='equipmentDetailTableDiv2'>").append(
					$("<input id='equipmentKeyInput' type='hidden' value=" + equipmentKey +">"),
					$("<table class='table table-bordered' style='width: 90%; text-align: center; margin:auto;'>").append(
							$("<thead>").append(
								$("<tr class='table-primary'>").append(
									$("<th colspan='2'>").html("기구정보")
								)
							),
	
							$("<tbody>").append(
								$("<tr>").append(
									$("<th class='table-light'>").html("기구명"),
									$("<td>").html(equipmentDetail.equipmentName)
								),
								$("<tr>").append(
									$("<th class='table-light'>").html("모델명"),
									$("<td>").html(equipmentDetail.equipmentModel)
								),
								$("<tr class='table-primary'>").append(
									$("<th colspan='2'>").html("거래처정보")
										),
								$("<tr>").append(
									$("<th class='table-light'>").html("거래처명"),
									$("<td>").html(equipmentDetail.buyerVO.buyerName)
								),
								$("<tr>").append(
									$("<th class='table-light'>").html("담당자"),
									$("<td>").html(equipmentDetail.buyerVO.buyerCharger)
								),
								$("<tr>").append(
									$("<th class='table-light'>").html("연락처"),
									$("<td>").html(equipmentDetail.buyerVO.buyerTel)
								)
							)
						)
					)
			)
		}else{
			let equipmentDetailTags = equipmentDetailTableDiv.append(
				$("<div id='equipmentDetailTableDiv2'>").append(
						$("<h4>").html("물리치료기구 정보가 없습니다.")
					)
				)
			}
	})
}
//----------------------------------------------------------------------------------------------- 


// 모달 창 닫히면 안에 내용 지우는 이벤트리스너 --------------------------------------------------------------- 
ptEquipmentStatusModal.addEventListener('hide.bs.modal', function (event) {
	console.log("모달 닫았다.");
	$("#equipmentDetailTableDiv2").remove();	
	$("#equipmentStatusTbody").empty();
})
//----------------------------------------------------------------------------------------------- 


// 장비 상태 기록 목록 --------------------------------------------------------------------------------
const equipmentStatusTbody = $("#equipmentStatusTbody");

const fn_equipmentStatusRec = (equipmentKey) =>{
	
	$.getJSON("/FinalPJ/ptEquipmentStatusList.do?eqKey="+equipmentKey).done(function(resp) {
		let eqDetailList = resp;
		
		let equipmentStatusTags = [];
		if(eqDetailList.length > 0) {
			$.each(eqDetailList, function(idx, eqDetail){
				let trs = $("<tr>").append(
							$("<td>").html(eqDetail.eqStatusRecVO.equipmentRecordDate),
							$("<td>").html(eqDetail.eqStatusRecVO.equipmentRecordContent),
							$("<td>").html(eqDetail.eqStatusRecVO.equipmentRecordWriter)
						)
					equipmentStatusTags.push(trs);
			});
			equipmentStatusTbody.append(equipmentStatusTags);
		}else{
			let equipmentStatusTags = equipmentStatusTbody.append(
				$("<tr>").append(
					$("<td colspan='3'>").html("상태점검 기록이 없습니다.")
				)
			)
		}
		$("#eqStatsuBtn").data("equipmentKey",equipmentKey);
	});
}
//-------------------------------------------------------------------------------------------- 


// 장비 상태 기록 인서트 ----------------------------------------------------------------------------
let ptEqStatusInsertForm = $("#ptEqStatusInsertForm");

	ptEqStatusInsertForm.on("submit", function(event){
		event.preventDefault();
	
		let equipmentKey = $("#eqStatsuBtn").data("equipmentKey");
		
		let eqStatusRecData = {
			equipmentKey : equipmentKey,
			equipmentRecordContent : $("input[name=equipmentRecordContent]").val(),
			equipmentRecordStatus : $("select[name=equipmentRecordStatus] option:Selected").val()
		}

		$.ajax({
			method : "POST",
			url : "${pageContext.request.contextPath}/ptEquipmentStatusInsert.do",
			data : JSON.stringify(eqStatusRecData),
			contentType : 'application/json; charset=utf-8',
			dataType : "text",
			beforeSend: function (xhr) {   /*데이터를 전송하기 전에 헤더에 csrf값을 설정한다*/
            xhr.setRequestHeader("${_csrf.headerName}", "${_csrf.token}");
        	}, 
			success : function(resp) {
				console.log("성공");
				equipmentStatusTbody.empty();
				fn_equipmentStatusRec(equipmentKey);
				$("[name=equipmentRecordContent]").val("");
				$("[name=equipmentRecordStatus]").prop("selectedIndex", 0);
			},
			error: function (request, status, error) {
	        console.log("code: " + request.status);
	        console.log("message: " + request.responseText);
	        console.log("error: " + error);
	    	}
		});
		return false;
	})

//------------------------------------------------------------------------------------ 




// 액팅화면에 데이터 넣기 -------------------------------------------------------------

let fn_actingDataInput = (bedKey) =>{
	
// 	$("#acPatientName").text("");
// 	$("#acPatientAge").text("");
// 	$("#acPatientDi").text("");
// 	$("#acDrName").text("");
	
	$.getJSON("${pageContext.request.contextPath}/actingDetail.do?bedKey="+bedKey).done(function(resp){
		console.log(resp);
		
		let actingInfo = resp;
		
		$("#acPatientName").text(actingInfo.patientName);
		$("#acPatientAge").text(actingInfo.patientAge+"/"+actingInfo.patientSex);
		$("#acPatientDi").text(actingInfo.diseaseNmEn);
		$("#acDrName").text(actingInfo.empName);
		
		let ptRecordKey = actingInfo.ptRecordKey;
		$("#actingBtn").data("ptrecordkey",ptRecordKey);
		let receiptKey = actingInfo.receiptKey;
		$("#actingBtn").data("receiptkey",receiptKey);
		
		$("#actingBtn").data("bedkey",bedKey);
		
	});
	
}

//------------------------------------------------------------------------------------ 


// 코멘트 입력 후 업데이트하기 ---------------------------------------------------------------- +  

const actingForm = $("#actingForm");

actingForm.on("submit", function(event){
	event.preventDefault();
	
	console.log("액팅버튼눌렀다.")
	
	let bedKey = $("#actingBtn").data("bedkey");
	
	// 침상 사용 업데이트 
	let bedData = {
				ptBedKey : bedKey,
				orderKey : "",
				ptBedStatus : "BS01"
			}
	
	$.ajax({
				method : "post",
				url : "${pageContext.request.contextPath}/ptRoomStatusUpdate.do",
				data : JSON.stringify(bedData),
				contentType : 'application/json; charset=utf-8',
				dataType : "text",
				beforeSend: function (xhr) {   /*데이터를 전송하기 전에 헤더에 csrf값을 설정한다*/
	            	xhr.setRequestHeader("${_csrf.headerName}", "${_csrf.token}");
	        	}, 
				success : function(resp) {
					console.log("침상 사용상태 사용가능으로 업데이트 성공");
				},
				error: function (request, status, error) {
		        console.log("code: " + request.status)
		        console.log("message: " + request.responseText)
		        console.log("error: " + error);
		    	}
			});
	
	
	
	let ptRecordKey = $("#actingBtn").data("ptrecordkey");
	let receiptKey = $("#actingBtn").data("receiptkey");
	let ptRecordContent = $("#floatingTextarea2").val();
	
	let data = {
			ptRecordKey : ptRecordKey,
			ptRecordContent : ptRecordContent 	
	}
	
	console.log(data);
	
	// 치료 종료 - 물리치료 기록(코멘트 추가해서) 업데이트, 대기상태 히스토리 업데이트, 대기환자 리스트 다시 가져오기, 치료기구 상태변경(사용가능으로 반납...)
	$.ajax({
		method : "POST",
		url : "${pageContext.request.contextPath}/actingCommentUpdate.do?receiptKey=" + receiptKey,
		data : JSON.stringify(data),
		contentType : 'application/json; charset=utf-8',
		dataType : "text",
		beforeSend: function (xhr) {   /*데이터를 전송하기 전에 헤더에 csrf값을 설정한다*/
        	xhr.setRequestHeader("${_csrf.headerName}", "${_csrf.token}");
    	}, 
		success : function(resp){
			console.log(resp);
			$(".nowPtbedsStatusDiv").find("[id^='bedKey']").empty();
	        ptRoomStatusImgList();
	   		
	        // 대기환자 리스트도 다시 가져와야한다.
	        $("#waitingListBody").empty();
	        ptWaitingList();
	        
			$("#acPatientName").text("");
			$("#acPatientAge").text("");
			$("#acPatientDi").text("");
			$("#acDrName").text("");
			$("#floatingTextarea2").val("")
		},
		error: function (request, status, error) {
	        console.log("code: " + request.status)
	        console.log("message: " + request.responseText)
	        console.log("error: " + error);
	    }
	});
	
	return false;
})

//------------------------------------------------------------------------------------ 

// 환자 진료 차트 상세 ---------------------------------------------------------------------

let fn_patientChartDetail = (patientKey, waitingKey) =>{
	
	$("#chPatientName").text("");
	$("#chPatientKey").text("");
	
	$.getJSON("${pageContext.request.contextPath}/patientChartDetail.do?patientKey="+patientKey+"&waitingKey="+waitingKey).done(function(resp){
		
		let chResp = resp;
		
		$("#chPatientName").text(chResp.patient.patientName);
		$("#chPatientKey").text(chResp.patient.patientKey);
		
		$("#chPI").html(
				"- C.C : " + chResp.receiptReason + "<br>"
				+ "- S/P : " + chResp.patient.preDiagnosis.preDiagnosisExperience + "<br>"
				+ "- P/Hx : " + chResp.patient.preDiagnosis.preDiagnosisDisease + "<br>"
				+ "- allergic : " + chResp.patient.preDiagnosis.preDiagnosisAllergy + "<br>"
				+ "- 임신유무 : " + chResp.patient.preDiagnosis.preDiagnosisPregnancy + "<br>"	
				);
		$("#chDI").html(
			"- Dx : " + chResp.mchartList[0].dianosis.diease.diseaseNmEn + "<br>"
			+ "- comment : " + chResp.mchartList[0].chartCont
		);
	
	})
	
}

//------------------------------------------------------------------------------------ 

// Scroll 생성 ------------------------------------------------------------------------- 

let ptEquipmentDiv = document.querySelector('#ptEquipmentDiv');
new SimpleBar(ptEquipmentDiv, { autoHide: true });

let equipmentStatusDiv = document.querySelector('#equipmentStatusDiv');
new SimpleBar(equipmentStatusDiv, { autoHide: true });

let ptWaitingListDiv = document.querySelector('#ptWaitingListDiv');
new SimpleBar(ptWaitingListDiv, { autoHide: true });

let patientChartDiv = document.querySelector('#patientChartDiv');
new SimpleBar(patientChartDiv, { autoHide: true });

let actingFormDiv = document.querySelector('#actingFormDiv');
new SimpleBar(actingFormDiv, { autoHide: true });

//------------------------------------------------------------------------------------ 


</script>











